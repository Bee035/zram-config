#! /bin/bash

createZswap () {
	createZdevice
	mkswap /dev/zram$RAM_DEV 2>&1 | tee -a $ZLOG
	if [ ! -z "$PRIORITY" ]
	then
		swapon -v -p $PRIORITY /dev/zram$RAM_DEV 2>&1 | tee -a $ZLOG
	else
		echo "zram$RAM_DEV no swap_priority" | tee -a $ZLOG
	fi	
	if [ ! -z "$PAGE_CLUSTER" ]
	then
		sysctl vm.page-cluster=$PAGE_CLUSTER  2>&1 | tee -a $ZLOG
	else
		echo "zram$RAM_DEV no page_cluster" | tee -a $ZLOG	
	fi
	if [ ! -z "$SWAPPINESS" ]
	then
		sysctl vm.swappiness=$SWAPPINESS 2>&1 | tee -a $ZLOG
	else
		echo "zram$RAM_DEV no swappiness" | tee -a $ZLOG
	fi
}
	
createZdir () {
	if [ ! -z "$BIND_DIR" ]
	then
		mkdir -p $BIND_DIR 2>&1 | tee -a $ZLOG
		if [ ! -z "$ZRAM_DIR" ]
		then
			mount --verbose --bind $ZRAM_DIR/ $BIND_DIR/ 2>&1 | tee -a $ZLOG
			mount --verbose --make-private $BIND_DIR/ 2>&1 | tee -a $ZLOG
			createZdevice
			mke2fs -v -t ext4 /dev/zram$RAM_DEV 2>&1 | tee -a $ZLOG
			mount --verbose --types ext4 -o nosuid,noexec,nodev /dev/zram$RAM_DEV $ZRAM_DIR/ 2>&1 | tee -a $ZLOG
			syncFromDisk
		else
			echo "No mount dir in ztab" | tee -a $ZLOG
			return 1
		fi
	else
		echo "No bind dir in ztab" | tee -a $ZLOG
		return 1
	fi
}
	
createZlog () {
	invoke-rc.d rsyslog stop  2>&1 | tee -a $ZLOG
	createZdir
	invoke-rc.d rsyslog start  2>&1 | tee -a $ZLOG
	journalctl --flush  2>&1 | tee -a $ZLOG
	if [ ! -z "$OLDLOG_DIR" ]
	then
		cp -arvf /etc/logrotate.conf /usr/local/share/zram-config/logrotate.conf.bak  2>&1 | tee -a $ZLOG
		sed -i "/^weekly.*/i olddir $OLDLOG_DIR" /etc/logrotate.conf  2>&1 | tee -a $ZLOG
		sed -i "/^weekly.*/i createolddir 755 root root" /etc/logrotate.conf  2>&1 | tee -a $ZLOG
		sed -i "/^weekly.*/i renamecopy" /etc/logrotate.conf  2>&1 | tee -a $ZLOG
	else
		echo "createZlog no oldlog dir in ztab" | tee -a $ZLOG
	fi
}
	
createZdevice () {
	# Check Zram Class created
	if [ ! -d "/sys/class/zram-control" ]; then
        modprobe --verbose zram  2>&1 | tee -a $ZLOG
        RAM_DEV='0'
	else
        RAM_DEV=$(cat /sys/class/zram-control/hot_add)
	fi
	if [ ! -z "$ALG" ]
	then
		echo "$ALG" > /sys/block/zram$RAM_DEV/comp_algorithm 2>&1 | tee -a $ZLOG
	else
		echo "zram$RAM_DEV no comp_algorithm" | tee -a $ZLOG
	fi
	if [ ! -z "$MEM_SIZE" ]
	then
		echo "$MEM_SIZE" > /sys/block/zram$RAM_DEV/mem_limit 2>&1 | tee -a $ZLOG
	else
		echo "zram$RAM_DEV no mem_limit" | tee -a $ZLOG
	fi
	if [ ! -z "$DISK_SIZE" ]
	then
		echo "$DISK_SIZE" > /sys/block/zram$RAM_DEV/disksize 2>&1 | tee -a $ZLOG
	else
		echo "zram$RAM_DEV no disksize" | tee -a $ZLOG
		return 1
	fi
	echo "zram$RAM_DEV created comp_algorithm=$ALG mem_limit=$MEM_SIZE disksize=$DISK_SIZE" | tee -a $ZLOG
}

syncFromDisk () {
	if cp -arvf $BIND_DIR -T $ZRAM_DIR  2>&1 | tee -a $ZLOG
	then
		echo "syncFromDisk $BIND_DIR to $ZRAM_DIR complete" | tee -a $ZLOG
	else
		echo "Error syncFromDisk $BIND_DIR to $ZRAM_DIR failure" | tee -a $ZLOG
		return 1
	fi
}

syncToDisk () {
	if cp -arvfu $ZRAM_DIR -T $BIND_DIR  2>&1 | tee -a $ZLOG
	then
		echo "syncToDisk $ZRAM_DIR to $BIND_DIR complete" | tee -a $ZLOG
	else
		echo "Error syncFromDisk $ZRAM_DIR to $BIND_DIR failure" | tee -a $ZLOG
		return 1
	fi			
}

removeZlog () {
	if [ ! -z "$OLDLOG_DIR" ]
	then
		cp -arvf /usr/local/share/zram-config/logrotate.conf.bak /etc/logrotate.conf  2>&1 | tee -a $ZLOG
	fi
	syncToDisk
	ZRAM_DEV=$(df "$ZRAM_DIR" | tail -1 | awk '{ print $1 }')
	DEV_NUM=$(echo "$ZRAM_DEV" | tr -dc '0-9')
	if [ ! -z "$ZRAM_DIR" ]
	then
		invoke-rc.d rsyslog stop 2>&1 | tee -a $ZLOG
		umount $ZRAM_DIR/ 2>&1 | tee -a $ZLOG
	else
		return 1
	fi
	if [ ! -z "$BIND_DIR" ]
	then
		umount $BIND_DIR/ 2>&1 | tee -a $ZLOG
		rm -rf $BIND_DIR 2>&1 | tee -a $ZLOG
		invoke-rc.d rsyslog start 2>&1 | tee -a $ZLOG
		journalctl --flush  2>&1 | tee -a $ZLOG
	else
		return 1
	fi
	echo "$DEV_NUM" > /sys/class/zram-control/hot_remove 2>&1 | tee -a $ZLOG
	echo "$ZRAM_DEV removed"  2>&1 | tee -a $ZLOG
}

removeZdir () {
	syncToDisk
	ZRAM_DEV=$(df "$ZRAM_DIR" | tail -1 | awk '{ print $1 }')
	DEV_NUM=$(echo "$ZRAM_DEV" | tr -dc '0-9')
	if [ ! -z "$ZRAM_DIR" ]
	then
		umount $ZRAM_DIR/  2>&1 | tee -a $ZLOG
	else
		return 1
	fi
	if [ ! -z "$BIND_DIR" ]
	then
		umount $BIND_DIR/ 2>&1 | tee -a $ZLOG
		rm -rf $BIND_DIR 2>&1 | tee -a $ZLOG
	else
		return 1
	fi
	echo "$DEV_NUM" > /sys/class/zram-control/hot_remove 2>&1 | tee -a $ZLOG
	echo "$ZRAM_DEV removed" | tee -a $ZLOG  
}

removeZswap () {
	ZRAM_DEV=$(grep zram /proc/swaps | tail -1 | awk '{ print $1 }')
	DEV_NUM=$(echo "$ZRAM_DEV" | tr -dc '0-9')
	swapoff $ZRAM_DEV  2>&1 | tee -a $ZLOG
	echo "$DEV_NUM" > /sys/class/zram-control/hot_remove 2>&1 | tee -a $ZLOG
	echo "$ZRAM_DEV removed" | tee -a $ZLOG
}

ZLOG=/usr/local/share/zram-config/log/zram-config.log

case "$1" in
	start)
		echo "zram-config start $(date --utc +%Y%m%d_%H%M%SZ)" | tee -a $ZLOG
		file=/etc/ztab
		ZTAB_EMPTY=true
		#Only 1 log can exist also make first as then last removed
		line=$(grep ^log $file | head -n 1)
		if [ ! -z "$line" ]
		then
			set -- $line
			echo "ztab create $1 $2 $3 $4 $5 $6 $7 $8 $9" | tee -a $ZLOG
			ZTAB_EMPTY=false
			ALG=$2
			MEM_SIZE=$3
			DISK_SIZE=$4
			ZRAM_DIR=$5
			BIND_DIR=$6
			OLDLOG_DIR=$7
			createZlog
		fi
		while read -r line; do
			case "$line" in
				"#"*)
					# Skip comment line
					continue
					;;

				"")
					# Skip empty line
					continue
					;;
					
				log*)
					# Skip empty line
					continue
					;;
				*)
					set -- $line
					echo "ztab create $1 $2 $3 $4 $5 $6 $7 $8 $9" | tee -a $ZLOG
					ZTAB_EMPTY=false
					ALG=$2
					MEM_SIZE=$3
					DISK_SIZE=$4
					case "$1" in
						swap)
							PRIORITY=$5
							PAGE_CLUSTER=$6
							SWAPPINESS=$7
							createZswap
							;;
						dir)
							ZRAM_DIR=$5
							BIND_DIR=$6
							createZdir
							;;
					esac
					;;
			esac
		done < "$file"
		if [ "$ZTAB_EMPTY" = true ] ; then
			echo '/etc/ztab is empty and needs to be configured' | tee -a $ZLOG
		fi
		;;
	stop)
		echo "zram-config stop $(date --utc +%Y%m%d_%H%M%SZ)" | tee -a $ZLOG
		tac /etc/ztab > /usr/local/share/zram-config/ztab.conf.rev 2>&1 | tee -a $ZLOG
		file=/usr/local/share/zram-config/ztab.conf.rev
		while read -r line; do
			case "$line" in
				"#"*)
					# Skip comment line
					continue
					;;

				"")
					# Skip empty line
					continue
					;;
					
				log*)
					# Skip empty line
					continue
					;;

				*)
					set -- $line
					echo "ztab remove $1 $2 $3 $4 $5 $6 $7 $8 $9" | tee -a $ZLOG
					ALG=$2
					MEM_SIZE=$3
					DISK_SIZE=$4
					case "$1" in
						swap)
							PRIORITY=$5
							PAGE_CLUSTER=$6
							SWAPPINESS=$7
							removeZswap
							;;
						dir)
							ZRAM_DIR=$5
							BIND_DIR=$6
							removeZdir
							;;
					esac
					;;
			esac
		done < "$file"
		#Only 1 log can exist also make first as then last removed
		file=/etc/ztab
		line=$(grep ^log $file | head -n 1)
		if [ ! -z "$line" ]
		then
			set -- $line
			echo "ztab remove $1 $2 $3 $4 $5 $6 $7 $8 $9" | tee -a $ZLOG
			ZTAB_EMPTY=false
			ALG=$2
			MEM_SIZE=$3
			DISK_SIZE=$4
			ZRAM_DIR=$5
			BIND_DIR=$6
			OLDLOG_DIR=$7
			removeZlog
		fi
		;;
	write)
		echo "zram-config write $(date --utc +%Y%m%d_%H%M%SZ)" | tee -a $ZLOG
		file=/etc/ztab
		#Only 1 log can exist also make first as then last removed
		line=$(grep ^log $file | head -n 1)
		if [ ! -z "$line" ]
		then
			set -- $line
			echo "ztab write $1 $2 $3 $4 $5 $6 $7 $8 $9" | tee -a $ZLOG
			ZTAB_EMPTY=false
			ALG=$2
			MEM_SIZE=$3
			DISK_SIZE=$4
			ZRAM_DIR=$5
			BIND_DIR=$6
			OLDLOG_DIR=$7
			syncToDisk
		fi
		while read -r line; do
			case "$line" in
				"#"*)
					# Skip comment line
					continue
					;;

				"")
					# Skip empty line
					continue
					;;

				*)
					set -- $line
					ALG=$2
					MEM_SIZE=$3
					DISK_SIZE=$4
					case "$1" in
						dir)
							echo "ztab write $1 $2 $3 $4 $5 $6 $7 $8 $9" | tee -a $ZLOG
							ZRAM_DIR=$5
							BIND_DIR=$6
							syncToDisk
							;;
					esac
					;;
			esac
		done < "$file"
		;;	
esac
